<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>编排示例 on FastGPT</title><link>/docs/workflow/examples/</link><description>Recent content in 编排示例 on FastGPT</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="/docs/workflow/examples/index.xml" rel="self" type="application/rss+xml"/><item><title>固定开头和结尾内容</title><link>/docs/workflow/examples/fixingevidence/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/workflow/examples/fixingevidence/</guid><description>如上图，可以通过指定回复编排一个固定的开头和结尾内容。
模块编排 link复制下面配置，点击「高级编排」右上角的导入按键，导入该配置。
编排配置 [ { &amp;#34;moduleId&amp;#34;: &amp;#34;userChatInput&amp;#34;, &amp;#34;name&amp;#34;: &amp;#34;用户问题(对话入口)&amp;#34;, &amp;#34;flowType&amp;#34;: &amp;#34;questionInput&amp;#34;, &amp;#34;position&amp;#34;: { &amp;#34;x&amp;#34;: 59.03170043915989, &amp;#34;y&amp;#34;: 1604.8595605938747 }, &amp;#34;inputs&amp;#34;: [ { &amp;#34;key&amp;#34;: &amp;#34;userChatInput&amp;#34;, &amp;#34;type&amp;#34;: &amp;#34;systemInput&amp;#34;, &amp;#34;label&amp;#34;: &amp;#34;用户问题&amp;#34;, &amp;#34;connected&amp;#34;: true } ], &amp;#34;outputs&amp;#34;: [ { &amp;#34;key&amp;#34;: &amp;#34;userChatInput&amp;#34;, &amp;#34;label&amp;#34;: &amp;#34;用户问题&amp;#34;, &amp;#34;type&amp;#34;: &amp;#34;source&amp;#34;, &amp;#34;valueType&amp;#34;: &amp;#34;string&amp;#34;, &amp;#34;targets&amp;#34;: [ { &amp;#34;moduleId&amp;#34;: &amp;#34;chatModule&amp;#34;, &amp;#34;key&amp;#34;: &amp;#34;userChatInput&amp;#34; }, { &amp;#34;moduleId&amp;#34;: &amp;#34;ymqh0t&amp;#34;, &amp;#34;key&amp;#34;: &amp;#34;switch&amp;#34; } ] } ] }, { &amp;#34;moduleId&amp;#34;: &amp;#34;history&amp;#34;, &amp;#34;name&amp;#34;: &amp;#34;聊天记录&amp;#34;, &amp;#34;flowType&amp;#34;: &amp;#34;historyNode&amp;#34;, &amp;#34;position&amp;#34;: { &amp;#34;x&amp;#34;: 38.</description></item><item><title>接入谷歌搜索</title><link>/docs/workflow/examples/google_search/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/workflow/examples/google_search/</guid><description>如上图，利用 HTTP 模块，你可以外接一个搜索引擎作为AI回复的参考资料。这里以调用 Google Search API 为例。注意：本文主要是为了介绍 HTTP 模型，具体的搜索效果需要依赖提示词和搜索引擎，尤其是【搜索引擎】，简单的搜索引擎无法获取更详细的内容，这部分可能需要更多的调试。
注册 Google Search API link参考这篇文章，每天可以免费使用 100 次。
写一个 Google Search 接口 link这里用 Laf 快速实现一个接口，即写即发布，无需部署。务必打开 POST 请求方式。
Laf 谷歌搜索Demo import cloud from &amp;#39;@lafjs/cloud&amp;#39; const googleSearchKey = &amp;#34;&amp;#34; const googleCxId = &amp;#34;&amp;#34; const baseurl = &amp;#34;https://www.googleapis.com/customsearch/v1&amp;#34; type RequestType = { data: { searchKey: string } } export default async function (ctx: FunctionContext) { const { data: { searchKey } } = ctx.body as RequestType if (!</description></item><item><title>实验室预约</title><link>/docs/workflow/examples/lab_appointment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/workflow/examples/lab_appointment/</guid><description>本示例演示了利用问题分类、内容提取和 HTTP 模块实现数据库的 CRUD 操作。以一个实验室预约为例，用户可以通过对话系统预约、取消、修改预约和查询预约记录。
编排流程解析 link编排 Tips：从左往右编辑流程；尽量不要使线交叉。
1. 全局变量使用 link通过设计一个全局变量，让用户输入姓名，模拟用户身份信息。实际使用过程中，通常是直接通过嵌入 Token 来标记用户身份。
2. 问题分类 link 如上图，用户问题作为对话的起点，流入【问题分类模块】，根据用户问题的内容，判断用户是询问实验室相关问题、预约实验室或其他问题。如果用户询问的是非实验问题，会直接拒绝回复内容。再根据问题是属于询问实验室相关/预约类问题，执行不同的流程。
🤗
Tips: 这里需要增加适当的上下文，方便模型更好的判断属于哪个类别~
3. 实验室介绍的知识库搜索 link这里不多介绍，标准的走了一套知识库搜索流程。
4. 内容提取 link 内容提取是 LLM 带来的十分重要的能力，可以从自然语言中提取出结构化的数据，从而方便进行逻辑处理。
这里用了 2 个提取模块，一个用于提取预约时间和实验室名称；一个用于提取预约行为。
提取时间和实验室名称时候，需要注意把必填关掉，否则模型可能会伪造一些内容，同时再对数据处理时候，需要进行判空处理。
最后将两个提取的结果，通过 HTTP 模块发送到后端进行数据库的操作。
5. HTTP模块执行预约操作 linkHTTP 模块允许你调用任意 GET/POST 类型的 HTTP 接口，从而实现一些复杂的业务逻辑。这里我们调用了一个预约实验室的接口，传入的是信息提取模块的结果和预约行为。
具体的入参结构可以参考HTTP模块，实在不行在接口里多打印 Debug。
响应值也很简单，只需要返回一个 JSON 对象 即可。注意！是对象，不是字符串。
总结 link 问题分类可以在简单的场景下使用，判断用户的问题类型，从而实现不同的路线。 可以通过内容提取模块，实现自然语言转结构化数据，从而实现复杂的逻辑操作。 内容提取 + HTTP 模块允许你无限扩展。 难点
模型对连续对话的分类和提取能力不足 附件 link编排配置 link可直接复制，导入到 FastGPT 中。
编排配置 [ { &amp;#34;moduleId&amp;#34;: &amp;#34;userChatInput&amp;#34;, &amp;#34;name&amp;#34;: &amp;#34;用户问题(对话入口)&amp;#34;, &amp;#34;avatar&amp;#34;: &amp;#34;/imgs/module/userChatInput.</description></item><item><title>全能助手</title><link>/docs/workflow/examples/versatile_assistant/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/workflow/examples/versatile_assistant/</guid><description>众所周知 GPT 只是一个语言模型，功能上有很多局限，但只要综合利用高级编排各模块功能，就可以轻松突破原有 GPT 的局限，实现更多功能。
当然，所谓“全能助手”只是一个遥远的设想，高级编排的玩法有很大的可能性，本文只是扩展了诸如【天气查询】、【微博热搜查询】的功能，主要还是希望大家能通过案例来了解下高级编排的思路，然后可以分享更多有意思的玩法。
简要介绍一下“全能助手”的思路 link思路说来也简单，以下分别用文字和图片两种方式介绍下
文字描述： 对于用户输入的问题，通过【问题分类】模块进行区分，分出【询问天气】、【微博热搜】、【其他问题】等 对于【询问天气】的情况，调用第三方 API 查询天气（后文会介绍），将查询到的 json 结果丢给【AI 对话】模块，让它根据用户问题来给出回答 对于【微博热搜】的情况，同理，也是调的第三方 API 对于【其他问题】的情况，直接走【AI 对话】模块就好了，跟普通的 GPT 聊天一样 流程图（方便理解）： 详细步骤 link以下对于相同的步骤不会赘述，对于第三方接口只介绍了【天气查询】，而【微博热榜】跟【天气查询】的步骤是一样的，只是接口和提示词不同，所以不再赘述。后文会发出完整的高级编排配置，可以导入自行查看~
第三方 API 获取 link案例中第三方接口来源目前都是在 https://api.vvhan.com/ 里获得，里面有许多花里胡哨的接口可以用，当然你有其他的接口可以对接也可以，反正主要是返回的数据。
举个查询天气的例子：
找到查询天气的 API 接口 由于我想要的效果是用户可以随意问接下来一周内任意时间的天气（比如用户可以问“接下来一周的天气适合晾被子吗”），所以选择了上面接口的这个格式：https://api.vvhan.com/api/weather?city=徐州&amp;amp;type=week 返回 json：
{&amp;#34;success&amp;#34;:true,&amp;#34;city&amp;#34;:&amp;#34;徐州市&amp;#34;,&amp;#34;data&amp;#34;:[{&amp;#34;date&amp;#34;:&amp;#34;2023-09-21&amp;#34;,&amp;#34;week&amp;#34;:&amp;#34;星期四&amp;#34;,&amp;#34;type&amp;#34;:&amp;#34;多云&amp;#34;,&amp;#34;low&amp;#34;:&amp;#34;14°C&amp;#34;,&amp;#34;high&amp;#34;:&amp;#34;24°C&amp;#34;,&amp;#34;fengxiang&amp;#34;:&amp;#34;东北风&amp;#34;,&amp;#34;fengli&amp;#34;:&amp;#34;3级&amp;#34;,&amp;#34;night&amp;#34;:{&amp;#34;type&amp;#34;:&amp;#34;多云&amp;#34;,&amp;#34;fengxiang&amp;#34;:&amp;#34;南风&amp;#34;,&amp;#34;fengli&amp;#34;:&amp;#34;3级&amp;#34;}},{&amp;#34;date&amp;#34;:&amp;#34;2023-09-22&amp;#34;,&amp;#34;week&amp;#34;:&amp;#34;星期五&amp;#34;,&amp;#34;type&amp;#34;:&amp;#34;阴&amp;#34;,&amp;#34;low&amp;#34;:&amp;#34;19°C&amp;#34;,&amp;#34;high&amp;#34;:&amp;#34;25°C&amp;#34;,&amp;#34;fengxiang&amp;#34;:&amp;#34;东风&amp;#34;,&amp;#34;fengli&amp;#34;:&amp;#34;3级&amp;#34;,&amp;#34;night&amp;#34;:{&amp;#34;type&amp;#34;:&amp;#34;阴&amp;#34;,&amp;#34;fengxiang&amp;#34;:&amp;#34;东风&amp;#34;,&amp;#34;fengli&amp;#34;:&amp;#34;3级&amp;#34;}},{&amp;#34;date&amp;#34;:&amp;#34;2023-09-23&amp;#34;,&amp;#34;week&amp;#34;:&amp;#34;星期六&amp;#34;,&amp;#34;type&amp;#34;:&amp;#34;小雨&amp;#34;,&amp;#34;low&amp;#34;:&amp;#34;20°C&amp;#34;,&amp;#34;high&amp;#34;:&amp;#34;23°C&amp;#34;,&amp;#34;fengxiang&amp;#34;:&amp;#34;东北风&amp;#34;,&amp;#34;fengli&amp;#34;:&amp;#34;3级&amp;#34;,&amp;#34;night&amp;#34;:{&amp;#34;type&amp;#34;:&amp;#34;小雨&amp;#34;,&amp;#34;fengxiang&amp;#34;:&amp;#34;东北风&amp;#34;,&amp;#34;fengli&amp;#34;:&amp;#34;3级&amp;#34;}},{&amp;#34;date&amp;#34;:&amp;#34;2023-09-24&amp;#34;,&amp;#34;week&amp;#34;:&amp;#34;星期日&amp;#34;,&amp;#34;type&amp;#34;:&amp;#34;中雨&amp;#34;,&amp;#34;low&amp;#34;:&amp;#34;20°C&amp;#34;,&amp;#34;high&amp;#34;:&amp;#34;23°C&amp;#34;,&amp;#34;fengxiang&amp;#34;:&amp;#34;东风&amp;#34;,&amp;#34;fengli&amp;#34;:&amp;#34;3级&amp;#34;,&amp;#34;night&amp;#34;:{&amp;#34;type&amp;#34;:&amp;#34;中雨&amp;#34;,&amp;#34;fengxiang&amp;#34;:&amp;#34;东北风&amp;#34;,&amp;#34;fengli&amp;#34;:&amp;#34;3级&amp;#34;}},{&amp;#34;date&amp;#34;:&amp;#34;2023-09-25&amp;#34;,&amp;#34;week&amp;#34;:&amp;#34;星期一&amp;#34;,&amp;#34;type&amp;#34;:&amp;#34;小雨&amp;#34;,&amp;#34;low&amp;#34;:&amp;#34;20°C&amp;#34;,&amp;#34;high&amp;#34;:&amp;#34;24°C&amp;#34;,&amp;#34;fengxiang&amp;#34;:&amp;#34;北风&amp;#34;,&amp;#34;fengli&amp;#34;:&amp;#34;3级&amp;#34;,&amp;#34;night&amp;#34;:{&amp;#34;type&amp;#34;:&amp;#34;阴&amp;#34;,&amp;#34;fengxiang&amp;#34;:&amp;#34;北风&amp;#34;,&amp;#34;fengli&amp;#34;:&amp;#34;3级&amp;#34;}},{&amp;#34;date&amp;#34;:&amp;#34;2023-09-26&amp;#34;,&amp;#34;week&amp;#34;:&amp;#34;星期二&amp;#34;,&amp;#34;type&amp;#34;:&amp;#34;阴&amp;#34;,&amp;#34;low&amp;#34;:&amp;#34;21°C&amp;#34;,&amp;#34;high&amp;#34;:&amp;#34;27°C&amp;#34;,&amp;#34;fengxiang&amp;#34;:&amp;#34;北风&amp;#34;,&amp;#34;fengli&amp;#34;:&amp;#34;3级&amp;#34;,&amp;#34;night&amp;#34;:{&amp;#34;type&amp;#34;:&amp;#34;阴&amp;#34;,&amp;#34;fengxiang&amp;#34;:&amp;#34;北风&amp;#34;,&amp;#34;fengli&amp;#34;:&amp;#34;3级&amp;#34;}},{&amp;#34;date&amp;#34;:&amp;#34;2023-09-27&amp;#34;,&amp;#34;week&amp;#34;:&amp;#34;星期三&amp;#34;,&amp;#34;type&amp;#34;:&amp;#34;阴&amp;#34;,&amp;#34;low&amp;#34;:&amp;#34;21°C&amp;#34;,&amp;#34;high&amp;#34;:&amp;#34;25°C&amp;#34;,&amp;#34;fengxiang&amp;#34;:&amp;#34;东北风&amp;#34;,&amp;#34;fengli&amp;#34;:&amp;#34;3级&amp;#34;,&amp;#34;night&amp;#34;:{&amp;#34;type&amp;#34;:&amp;#34;阴&amp;#34;,&amp;#34;fengxiang&amp;#34;:&amp;#34;北风&amp;#34;,&amp;#34;fengli&amp;#34;:&amp;#34;3级&amp;#34;}}]} 由于 FastGPT 的 【http 模块】，对于返回的 json 是以对象形式接收，而我们期望得到的是上述 json 中的“data”字段，而“data”又是数组格式，无法直接丢给【AI 对话】模块（我丢过，非字符串格式报错了，不知道后面会不会更新），所以需要对其做一层中转，将“data”字段转成字符串格式。思路如此，中转方式多样，这里介绍我自己的做法：用 python 起一个服务，来负责对 API 的中转，代码如下（包含了天气接口和微博热搜接口）： from flask import Flask, request, Response import requests import json app = Flask(__name__) @app.route(&amp;#39;/weather&amp;#39;, methods=[&amp;#39;GET&amp;#39;,&amp;#39;POST&amp;#39;]) def weather(): if request.</description></item></channel></rss>